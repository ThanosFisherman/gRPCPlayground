syntax = "proto3";

package com.thanosfisherman.grpcplayground.protos;

// There is a single API which returns the credentials available for the given user id.
//
// There is no registration needed, just generate a random UUID, and use that, the server
// will generate credentials automatically for it.
service CredentialsService {
    rpc GetCredentials(GetCredentialsRequest) returns (GetCredentialsResponse) {}
}

// Request to get the available credentials for the given user
//
// Allowing to paginate by using the last seen credential id, for example, if you already saw
// credentials 1 and 2, you can set the `after` field to `2`, and you will get only credentials
// with `id > 2`.
//
// The number of results is limited by the `limit` field.
message GetCredentialsRequest {
    string userId = 1; // the user id to request the credentials for (it must be a java.util.UUID)
    int32 limit = 2; // the max amount of results to get (optional, defaults to 3)
    int32 after = 3; // optional argument to paginate the results
}

// The response with available credentials, sorted by id (lowest to highest)
message GetCredentialsResponse {
    repeated Credential credentials = 1;
}

message Credential {
    int32 id = 1; // the unique incremental id for the credential (starts at 1)
    int64 issuedOn = 2; // a System.currentTimeMillis() when the credential was issued
    string subject = 3; // the subject's name for this credential
    string issuer = 4; // the issuer's name emitting this credential
    string title = 5; // the title on the credential
}

message CredentialsList {
    Credential credentialsItem = 1;
    repeated Credential credentials = 2;
}